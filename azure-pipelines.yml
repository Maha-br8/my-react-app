trigger:
- main

stages:
# ===== Build Stage =====
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'
    - script: |
        npm install -g serve
        npm install
        npm run build
      displayName: 'Build React App'
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: 'build'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/build.zip'
        replaceExistingArchive: true
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/build.zip'
        ArtifactName: 'drop'
        publishLocation: 'Container'

# ===== Deploy to Staging =====
- stage: DeployStaging
  dependsOn: Build
  jobs:
  - job: DeployStaging
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DownloadBuildArtifacts@0
      inputs:
        artifactName: 'drop'
    - task: AzureRmWebAppDeployment@5
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: 'azure-react-connection'
        appType: 'webAppLinux'
        WebAppName: 'my-react-app-staging'
        packageForLinux: '$(System.ArtifactsDirectory)/drop/build.zip'
        RuntimeStack: 'NODE|18-lts'

# ===== Deploy to Production =====
- stage: DeployProd
  dependsOn: DeployStaging
  condition: succeeded()
  jobs:
  - job: DeployProd
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DownloadBuildArtifacts@0
      inputs:
        artifactName: 'drop'
    - task: AzureRmWebAppDeployment@5
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: 'azure-react-connection'
        appType: 'webAppLinux'
        WebAppName: 'my-react-app-prod'
        packageForLinux: '$(System.ArtifactsDirectory)/drop/build.zip'
        RuntimeStack: 'NODE|18-lts'
